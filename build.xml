<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="LabKey Build" default="build" basedir=".">

    <target name="pick_mssql" description="Switch to SQL Server configuration">
        <echo message="Picking MS SQLServer configuration" />
        <copy tofile="${basedir}/../config.properties" overwrite="true" file="${basedir}/../configs/mssql.properties"/>
        <antcall target="setup" />
    </target>

    <target name="pick_pg" description="Switch to PostgreSQL configuration">
        <echo message="Picking PostgreSQL configuration" />
        <copy tofile="${basedir}/../config.properties" overwrite="true" file="${basedir}/../configs/pg.properties"/>
        <antcall target="setup" />
    </target>

    <property environment="env"/>

    <import file="./beehive-tools.xml"/>

    <!-- =================================================================== -->
    <!-- Initialize                                                          -->
    <!-- =================================================================== -->

    <target name="init">
        <condition property="tomcat.home" value="${env.CATALINA_HOME}">
            <isset property="env.CATALINA_HOME"/>
        </condition>
        <condition property="tomcat.home" value="c:/tomcat">
            <not><isset property="tomcat.home"/></not>
        </condition>
        <!-- JASPER needs catalina.home (because of what's in webapps/log4j.xml)
        so we set it here -->
        <property name="catalina.home" value="${tomcat.home}" />

        <property file="../common.properties"/>

        <echo message="tomcat.home=${tomcat.home}"/>

        <property name="webapps" value="../../webapps"/>

        <path id="controls.dependency.path">
            <pathelement location="${lib.dir}/web/beehive-controls.jar"/>
        </path>

        <path id="netui-compiler.dependency.path">
            <pathelement location="${lib.dir}/build/beehive-netui-compiler.jar"/>
        </path>

        <path id="velocity.dependency.path">
            <pathelement location="${lib.dir}/build/velocity-dep-1.4.jar"/>
        </path>

        <path id="gwt-compiler.dependency.path">
            <pathelement location="${lib.dir}/build/gwt-user.jar"/>
            <pathelement location="${lib.dir}/build/gwt-dev-windows.jar"/>
        </path>


<!--        <path id="xbean.dependency.path">
            <pathelement location="${lib.dir}/web/apache-xbean.jar"/>
            <pathelement location="${lib.dir}/web/jsr173_1.0_api.jar"/>
        </path>
-->
        <property name="build.dir" value="${basedir}/../../build" />
        <property name="dist.dir" value="${basedir}/../../dist"/>
        <property name="external.root" value="${basedir}/../../external"/>
        <property name="lib.dir" value="${external.root}/lib"/>
        <property name="build.modules.dir" value="${build.dir}/modules" />
        <property name="labkey.build.dir" value="${build.dir}/labkeyWebapp" />
        <property name="assembled.modules.dir" value="${labkey.build.dir}/modules" />
        <property name="assembled.tempModules.dir" value="${labkey.build.dir}/tempModules" />
        <property name="labkey.explodedWar.dir" value="${labkey.build.dir}/explodedWar" />
        <property name="labkey.tempWar.dir" value="${labkey.build.dir}/tempWar" />
        <property name="gensrc.dir" value="${build.dir}/gensrc" />
        <property name="tools.classes" value="${build.dir}/toolsClasses"/>
        <property name="webapp.classes" value="${labkey.tempWar.dir}/WEB-INF/classes"/>
        <property name="webapp.lib" value="${labkey.tempWar.dir}/WEB-INF/lib"/>
        <property name="javadoc.dir" value="${labkey.build.dir}/javadoc"/>
        <property name="jsp.jar.dir" value="${labkey.tempWar.dir}/WEB-INF/jsp" />
        <property name="schemas.jar.file" value="${webapp.lib}/schemas.jar" />
        <property name="module.api.jar.file" value="${webapp.lib}/api.jar" />
        <property name="cabig.dir" value="${basedir}/../../caBIG"/>
        <property name="schemas.dir" value="${basedir}/../../schemas" />

    <!-- Classpath for components shared between LabKey and msInspect (e.g., tools, util) -->
        <path id="shared.class.path">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
            </fileset>
            <pathelement path="${schemas.jar.file}"/>
        </path>

        <path id="component.class.path">
            <fileset dir="${tomcat.home}/common/lib">
                <include name="servlet-api.jar"/>
                <include name="mail.jar"/>
                <include name="jsp-api.jar"/>
                <include name="activation.jar"/>
                <include name="naming-factory-dbcp.jar"/>
            </fileset>
            <fileset dir="${lib.dir}/web">
                <include name="*.jar"/>
            </fileset>
            <path refid="shared.class.path"/>
            <pathelement path="${build.class.path}"/>
            <pathelement path="${module.api.jar.file}"/>
            <pathelement path="${tools.classes}"/>
        </path>

        <path id="webapp.class.path">
            <pathelement path="${webapp.classes}"/>
            <path refid="component.class.path"/>
        </path>

        <path id="schemas.compile.class.path">
            <fileset dir="${lib.dir}">
                <include name="xbean.jar"/>
                <include name="stax-api-1.0.jar"/>
            </fileset>
        </path>

        <taskdef name="xmlbean"
            classname="org.apache.xmlbeans.impl.tool.XMLBean"
            classpathref="schemas.compile.class.path"/>

        <path id="axis.classpath">
            <pathelement path="${lib.dir}/log4j-1.2.8.jar"/>
            <pathelement path="${lib.dir}/commons-discovery-0.2.jar"/>
            <pathelement path="${lib.dir}/web/commons-logging-1.1.jar"/>
            <pathelement path="${lib.dir}/jaxrpc.jar"/>
            <pathelement path="${lib.dir}/saaj.jar"/>
            <pathelement path="${lib.dir}/wsdl4j-1.5.1.jar"/>
            <pathelement path="${lib.dir}/axis.jar"/>
            <pathelement path="${lib.dir}/build/axis-ant.jar"/>
            <pathelement path="${lib.dir}/common/activation.jar"/>
            <pathelement path="${lib.dir}/common/mail.jar"/>
        </path>

        <tstamp>
            <format property="buildtime" pattern="MMMM d yyyy, h:mm aa" />
        </tstamp>

        <taskdef resource="axis-tasks.properties"
            classpathref="axis.classpath" />
    </target>

    <target name="check_and_copy_config_files">
        <!-- Moved into a subtarget so that CruiseControl can correctly
             reset the configFilesUpToDate property. Normally, Ant
             doesn't let you overwrite a property value -->
        <move failonerror="false" file="${tomcat.home}/conf/Catalina/localhost/cpas.xml" tofile="${tomcat.home}/conf/Catalina/localhost/labkey.xml" />
        <echo message="Checking for config changes: ${build.dir}/labkey.xml vs. ${tomcat.home}/conf/Catalina/localhost/labkey.xml"/>
        <condition property="configFilesUpToDate">
            <filesmatch file1="${build.dir}/labkey.xml" file2="${tomcat.home}/conf/Catalina/localhost/labkey.xml"/>
        </condition>
        <echo message="configFilesUpToDate property: ${configFilesUpToDate}" />
        <antcall target="copy_config_files" />
    </target>

    <target name="create_module" depends="init">
        <input message="Enter the name for your new module:" addproperty="moduleName" />
        <input message="Enter the name for your new module, all in lowercase:" addproperty="moduleNameLowercase" />
        <input message="Enter the full path for where to put the new module:" addproperty="moduleDestination" />

        <property name="tempDir" value="${build.dir}/tempNewModuleDir" />
        <delete dir="${tempDir}" />
        <mkdir dir="${tempDir}" />

        <property name="tempDir2" value="${build.dir}/tempNewModuleDir2" />
        <delete dir="${tempDir2}" />
        <mkdir dir="${tempDir2}" />

        <mkdir dir="${moduleDestination}" />

        <!-- Do one copy, renaming the directory names -->
        <copy todir="${tempDir}">
            <fileset dir="./moduleTemplate">
                <include name="**" />
            </fileset>
            <mapper type="regexp" from="(.*)MODULE_DIR_NAME(.*)" to="\1${moduleNameLowercase}\2"/>
        </copy>

        <copy todir="${tempDir}">
            <fileset dir="./moduleTemplate">
                <exclude name="**/MODULE_DIR_NAME/**" />
                <exclude name="**/MODULE_DIR_NAME*" />
            </fileset>
        </copy>

        <!-- Do a second copy, renaming the files with the lowercase module name as part of their name -->
        <copy todir="${tempDir2}">
            <fileset dir="${tempDir}">
                <include name="**" />
            </fileset>
            <mapper type="regexp" from="(.*)MODULE_LOWERCASE_NAME(.*)" to="\1${moduleNameLowercase}\2"/>
        </copy>

        <copy todir="${tempDir2}">
            <fileset dir="${tempDir}">
                <exclude name="**/MODULE_LOWERCASE_NAME/**" />
                <exclude name="**/MODULE_LOWERCASE_NAME*" />
            </fileset>
        </copy>

        <!-- Do a third copy, renaming the files with the uppercase module name as part of their name -->
        <copy todir="${moduleDestination}">
            <fileset dir="${tempDir2}">
                <include name="**" />
            </fileset>
            <mapper type="regexp" from="(.*)MODULE_NAME(.*)" to="\1${moduleName}\2"/>
            <filterset begintoken="@@" endtoken="@@">
                <filter token="MODULE_NAME" value="${moduleName}"/>
                <filter token="MODULE_LOWERCASE_NAME" value="${moduleNameLowercase}"/>
            </filterset>
        </copy>

        <copy todir="${moduleDestination}">
            <fileset dir="${tempDir2}">
                <exclude name="**MODULE_NAME**" />
                <exclude name="**/MODULE_NAME*" />
            </fileset>
            <filterset begintoken="@@" endtoken="@@">
                <filter token="MODULE_NAME" value="${moduleName}"/>
                <filter token="MODULE_LOWERCASE_NAME" value="${moduleNameLowercase}"/>
            </filterset>
        </copy>

        <copy tofile="${moduleDestination}/build.xml" file="../standalone_build.xml" />
        <replace file="${moduleDestination}/build.xml" token="name=&quot;module.name&quot; value=&quot;&quot;" value="name=&quot;module.name&quot; value=&quot;${moduleName}&quot;"/>

        <delete dir="${tempDir}" />
        <delete dir="${tempDir2}" />

        <echo message="Module created in ${moduleDestination}." />
        <echo message="Add ${moduleDestination}/${moduleName}.iml to your IntelliJ project to start editing the code." />
        <echo message="Run Ant on ${moduleDestination}/build.xml to build your new module." />
    </target>

    <target name="copy_config_files" unless="configFilesUpToDate">
        <echo message="Copying config files to Tomcat" />
        <copy todir="${tomcat.home}/conf/Catalina/localhost" file="${build.dir}/labkey.xml" overwrite="true"/>
    </target>


    <target name="caBIG_devkit" depends="init">
        <property name="build.devkit.dir" value="${build.dir}/caBIG/devkit" />
        <property name="devkit.version" value="1.5" />

        <delete dir="${build.devkit.dir}" />

        <mkdir dir="${build.devkit.dir}" />
        <mkdir dir="${build.devkit.dir}/lib" />
        <mkdir dir="${build.devkit.dir}/lib/axis-1_4" />
        <mkdir dir="${build.devkit.dir}/docs" />
        <mkdir dir="${dist.dir}" />

        <antcall target="caBIGJavaDoc" />
        
        <copy todir="${build.devkit.dir}" >
              <fileset dir="${cabig.dir}/devkit">
                  <include name="*" />
                  <include name="samples/**" />
                  <include name="docs/**" />
              </fileset>
        </copy>

        <copy todir="${build.devkit.dir}/lib" >
              <fileset dir="${build.dir}/caBIG" includes="client.jar" />
        </copy>
        <copy todir="${build.devkit.dir}/lib/axis-1_4">
            <fileset dir="${cabig.dir}/axis-1_4/lib">
                <include name="jaxrpc.jar"/>
                <include name="activation.*"/>
                <include name="axis.jar"/>
                <include name="commons-discovery-0.2.*"/>
                <include name="commons-logging-1.0.4.*"/>
                <include name="mailapi_1_3_1.jar"/>
                <include name="saaj.jar"/>
                <include name="wsdl4j-1.5.1.*"/>
                <include name="endorsed/*"/>
            </fileset>
        </copy>
<!--
        <javadoc
            sourcepath="../caBIG/client/src"
            destdir="${build.devkit.dir}/javadoc"
            doctitle="CPAS caBIG client API">
            <package name="org.labkey.cpas.cabig.client" />
        </javadoc>
-->
        <zip destfile="${build.dir}/caBIG/LabKey-caBIG-devkit-${devkit.version}.zip" update="true">
                <zipfileset dir="${build.devkit.dir}">
                </zipfileset>
         </zip>

         <tar destfile="${build.dir}/caBIG/LabKey-caBIG-devkit-${devkit.version}.tar.gz" longfile="gnu" compression="gzip">
            <tarfileset dir="${build.devkit.dir}" >
         </tarfileset>
        </tar>


    </target>

    <target name="caBIGJavaDoc" depends="init">
        <mkdir dir="${build.dir}/caBIG" />
        <mkdir dir="${build.dir}/caBIG/devkit" />
        <mkdir dir="${build.dir}/caBIG/devkit/docs" />

        <javadoc
            sourcepath="${cabig.dir}/client/src"
            destdir="${build.dir}/caBIG/devkit/docs"
            doctitle="LabKey caBIG client API">
            <package name="org.labkey.cpas.cabig.client" />
        </javadoc>
    </target>

    <target name="caBIG" depends="init">
        <mkdir dir="${build.dir}/caBIG" />
        <mkdir dir="${build.dir}/caBIG/classes" />
        <mkdir dir="${build.dir}/caBIG/sampleClasses" />
        <mkdir dir="${build.dir}/caBIG/genSrc" />

        <axis-wsdl2java
            url="experiment/wsdl/experiment.wsdl"
            wrapArrays="true"
            output="${build.dir}/caBIG/genSrc">
            <mapping namespace="http://cpas.fhcrc.org/experimentQuery/xml" package="org.labkey.cpas.axis.experimentQuery" />
            <mapping namespace="http://cpas.fhcrc.org/exp/xml" package="org.labkey.cpas.axis.exp" />
            <mapping namespace="http://localhost/cpas/services/urn:experiment" package="org.labkey.cpas.axis.experimentWS" />
        </axis-wsdl2java>

        <javac
            destdir="${build.dir}/caBIG/classes"
            debug="true"
            optimize="true"
            source="1.5"
            classpathref="component.class.path">
            <src path="${cabig.dir}/client/src"/>
            <src path="${build.dir}/caBIG/genSrc"/>
        </javac>
        <copy todir="${build.dir}/caBIG/classes">
            <fileset dir="${cabig.dir}/client/src">
                <exclude name="**/*.java" />
            </fileset>
        </copy>

        <jar basedir="${build.dir}/caBIG/classes" destfile="${build.dir}/caBIG/client.jar" />

        <path id="caBIG.samples.class.path">
            <fileset dir="${build.dir}/caBIG">
                <include name="client.jar"/>
            </fileset>
            <path refid="component.class.path"/>
        </path>

        <javac
            destdir="${build.dir}/caBIG/sampleClasses"
            debug="true"
            optimize="true"
            source="1.5"
            classpathref="caBIG.samples.class.path">
            <src path="${cabig.dir}/devkit/samples/src"/>
        </javac>

    </target>

    <!-- =================================================================== -->
    <!-- Setup Tomcat server                                                 -->
    <!-- =================================================================== -->

    <target name="setup" depends="init" unless="skip-setup" description="Prepares app-specific configurations and copies server libraries to Tomcat">

   <!-- For some reason, Tomcat 5.5.9 shipped without a default temp dir. JSPs (e.g. button.jsp) -->
   <!-- won't work without one, so we ensure it exists here.                                     -->
        <mkdir dir="${tomcat.home}/temp"/>

        <condition property="noConfigProperties">
            <not>
                <available file="../config.properties"/>
            </not>
        </condition>

        <fail if="noConfigProperties" message="You need to do a pick_pg or pick_mssql before building"/>

    <!-- Copy context config files to tomcat, substituting app-specific settings on the way -->
        <copy todir="${build.dir}" overwrite="true">
            <fileset file="${webapps}/labkey.xml"/>
            <filterset begintoken="@@" endtoken="@@">
                <filtersfile file="../config.properties"/>
                <filter token="appDocBase" value="${labkey.explodedWar.dir}"/>
            </filterset>
        </copy>
        <antcall target="check_and_copy_config_files" inheritall="false">
            <param name="tomcat.home" value="${tomcat.home}"/>
            <param name="build.dir" value="${build.dir}" />
        </antcall>

        <!-- Copy libraries to server -->
        <copy todir="${tomcat.home}/common/lib" overwrite="true">
            <fileset dir="${lib.dir}/common">
                <include name="*.jar"/>
            </fileset>
        </copy>

    </target>


    <target name="uptodate_build_schemas">
        <uptodate property="schemauptodate" targetfile="${schemas.jar.file}">
            <srcfiles dir="${schemas.dir}" includes="*.xsd" />
        </uptodate>
    </target>


    <!-- =================================================================== -->
    <!-- Build schemas jar                                                   -->
    <!-- =================================================================== -->

    <target name="build_schemas" depends="init,uptodate_build_schemas" description="Builds XML Beans schemas jar" unless="schemauptodate">
        <property name="xmlbean.classes" value="${build.dir}/xmlbeanClasses"/>
        <mkdir dir="${xmlbean.classes}" />

        <xmlbean
            schema="${schemas.dir}"
            srcgendir="${gensrc.dir}/xmlbeanSrc"
            classgendir="${xmlbean.classes}"
            classpathref="schemas.compile.class.path"
            failonerror="true"/>

        <mkdir dir="${webapp.lib}" />
        <jar jarfile="${schemas.jar.file}" basedir="${xmlbean.classes}" />

        <antcall target="copyWar" />
    </target>


    <!-- =================================================================== -->
    <!-- Build classes                                                       -->
    <!-- =================================================================== -->

    <target name="build_classes" depends="init" description="Builds all classes in the webapp">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${gensrc.dir}"/>
        <mkdir dir="${webapp.classes}"/>
        <mkdir dir="${tools.classes}"/>
        <mkdir dir="${webapp.lib}"/>

        <!--
        Default for development is to use a console appender in log4j
        For production builds, this property will already be set, so its
        value will be preserved
        -->
        <property name="log4j.consoleAppender" value="&lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;"/>

        <!-- Set up log4j.xml, now under the webapp; since we are in dev, add a CONSOLE appender -->
        <copy todir="${webapp.classes}" overwrite="true" preservelastmodified="true">
            <fileset file="${webapps}/log4j.xml"/>
            <filterset begintoken="@@" endtoken="@@">
                <filter token="consoleAppender" value="${log4j.consoleAppender}"/>
            </filterset>
        </copy>

        <copy todir="${webapp.lib}">
            <fileset dir="${lib.dir}/web">
                <include name="*.jar" />
                <include name="jars.txt" />
            </fileset>
            <fileset dir="${lib.dir}">
                <include name="*.jar" />
            </fileset>
        </copy>

        <copy todir="${labkey.tempWar.dir}/WEB-INF" file="${external.root}/bin/executables.txt" />

        <!-- TODO: Should move all msInspect-specific stuff into a single hierarchy instead of excluding scattered directories -->
        <echo>Build tools sources</echo>
        <javac srcdir="${webapps}/tools"
            destdir="${tools.classes}"
            debug="true"
            optimize="true"
            source="1.5"
            target="1.5"
            classpathref="shared.class.path">
            <exclude name="org/swixml/**"/>
            <exclude name="modwt/**"/>
            <exclude name="org/fhcrc/cpas/workbench/**"/>
            <exclude name="org/fhcrc/edi/workbench/**"/>
            <exclude name="org/fhcrc/cpas/viewer/**"/>
            <exclude name="org/fhcrc/cpas/localization/**"/>
        </javac>

        <copy todir="${webapp.classes}">
            <fileset dir="${tools.classes}" />
        </copy>

        <antcall target="bootstrap" />
        <antcall target="build_module_classes">
            <param name="skipWarCopy" value="true" />
        </antcall>

        <antcall target="copyWar" />

        <antcall target="caBIG" /> 
    </target>

    <target name="api" depends="init">

        <property name="moduleBuildDir" value="${build.modules.dir}/api" />
        <property name="moduleWebappDir" value="../internal/webapp" />
        <property name="moduleSrcDir" value="../internal/src" />
        <property name="moduleClassesDir" value="${moduleBuildDir}/classes" />

        <mkdir dir="${moduleClassesDir}" />

        <!-- Copy over all the webapp content -->
        <copy todir="${labkey.tempWar.dir}">
            <fileset dir="${moduleWebappDir}"/>
        </copy>

        <echo>Build API sources</echo>
        <javac
            destdir="${moduleClassesDir}"
            debug="true"
            optimize="true"
            source="1.5"
            classpathref="component.class.path">
            <src path="${moduleSrcDir}"/>
        </javac>

        <jar jarfile="${labkey.tempWar.dir}/WEB-INF/lib/api.jar" basedir="${moduleClassesDir}">
            <fileset dir="${moduleSrcDir}">
                <exclude name="**/*.java" />
                <exclude name="**/*.jsp" />
            </fileset>
        </jar>

        <!-- START JSP BUILD -->
        <property name="moduleJspTempDir" value="${moduleBuildDir}/jspTempDir" />
        <property name="moduleJspJarFile" value="${jsp.jar.dir}/api_jsp.jar" />
        <!-- Give a dummy location for the extra lib dir - API doesn't need one, but the directory needs to exist -->
        <property name="extraJspLibDir" value="${moduleBuildDir}/classes" />
        <condition property="jspUpToDate">
            <!-- No need to build JSPs if either
            1. there are no JSP files in this module (NYI)
            2. the JSP files are not newer than "module_jsp.jar"
            -->
            <uptodate targetfile="${moduleJspJarFile}">
                <srcfiles dir="${moduleSrcDir}" includes="**/*.jsp" />
            </uptodate>
        </condition>
        <antcall target="sub_build_jsp" />
        <!-- END JSP BUILD -->

        <antcall target="copyWar" />
    </target>

    <!-- Generates .java files from .jsp files -->
    <target name="sub_build_jsp" unless="jspUpToDate">
        <taskdef classname="org.apache.jasper.JspC" name="jasper2" >
          <classpath id="jspc.classpath">
            <pathelement location="${java.home}/../lib/tools.jar"/>
            <fileset dir="${tomcat.home}/bin">
              <include name="*.jar"/>
            </fileset>
            <fileset dir="${tomcat.home}/server/lib">
              <include name="*.jar"/>
            </fileset>
            <fileset dir="${tomcat.home}/common/lib">
              <include name="jasper-compiler.jar" />
              <include name="jasper-runtime.jar"/>
              <include name="commons-el.jar" />
            </fileset>
            <pathelement location="${build.lib.dir}/jspc-log4j"/>
            <path refid="webapp.class.path" />
            <pathelement location="${moduleClassesDir}" />
            <fileset dir="${extraJspLibDir}">
              <include name="*.jar"/>
            </fileset>
          </classpath>
        </taskdef>

        <mkdir dir="${moduleJspTempDir}" />
        <mkdir dir="${moduleJspTempDir}/webapp" />
        <copy todir="${moduleJspTempDir}/webapp">
            <fileset dir="${moduleSrcDir}">
                <include name="**/*.jsp" />
            </fileset>
        </copy>
        <mkdir dir="${moduleJspTempDir}/webapp/WEB-INF" />
        <copy todir="${moduleJspTempDir}/webapp/WEB-INF">
            <fileset dir="${labkey.tempWar.dir}/WEB-INF">
                <include name="web.xml" />
                <include name="*.tld" />
                <include name="tags/**" />
                <!-- technically, we should also include web-inf/lib/*.jar, in case they contain
                .tld files, but we're not using them, so we won't -->
            </fileset>
        </copy>
        <mkdir dir="${moduleJspTempDir}/classes" />
        <mkdir dir="${jsp.jar.dir}"/>

        <jasper2
                 validateXml="false"
                 uriroot="${moduleJspTempDir}/webapp"
                 outputDir="${moduleJspTempDir}/classes"
                 package="org.fhcrc.cpas.jsp.compiled"
                 compilerTargetVM="1.5"
                 compilerSourceVM="1.5"
                 trimSpaces="false"
                 compile="true"
                 listErrors="true"
                />

        <jar file="${moduleJspJarFile}" basedir="${moduleJspTempDir}/classes"/>
    </target>

    <target name="query_svn_number" depends="init">
        <!-- The way we get the SVN revision is kind of hacky - we rely on the fact
        that Ant will parse the "svn info" file as a properties file, which is true
        for the elements about which we care, but not for all the values.  -->
        <exec executable="svn" output="${build.dir}/svn.properties" failifexecutionfails="false">
            <arg value="info"/>
        </exec>
        <!-- Make sure there's actually a file - it won't be created if we can't run the SVN client -->
        <touch file="${build.dir}/svn.properties" />
    </target>

    <target name="sub_build_module" if="moduleName" depends="init,query_svn_number">
        <property name="moduleDir" value="./${moduleName}" />
        <property name="moduleBuildDir" value="${build.modules.dir}/${moduleName}" />
        <property name="modulePageflowTempDir" value="${moduleBuildDir}/pageflowTempDir" />
        <property name="modulePageflowTempOutputDir" value="${moduleBuildDir}/pageflowTempOutputDir" />
        <property name="moduleWebappDir" value="${moduleDir}/webapp" />
        <property name="moduleSrcDir" value="${moduleDir}/src" />
        <property name="moduleClassesDir" value="${moduleBuildDir}/classes" />
        <property name="moduleAdditionalSrcPath" value="" />
        <property name="explodedMarDir" value="${moduleBuildDir}/explodedMar" />
        <property name="explodedMarMetaInfDir" value="${explodedMarDir}/META-INF" />
        <property name="explodedMarLibDir" value="${explodedMarMetaInfDir}/lib" />
        <property name="explodedMarJspDir" value="${explodedMarMetaInfDir}/jsp" />
        <property name="moduleAxisDeploy" value="${moduleDir}/wsdl/deploy.wsdd" />
        <property name="assembledModule" value="${assembled.tempModules.dir}/${moduleName}.module" />

        <mkdir dir="${modulePageflowTempDir}" />
        <mkdir dir="${modulePageflowTempOutputDir}" />
        <mkdir dir="${moduleClassesDir}" />
        <mkdir dir="${explodedMarDir}" />
        <mkdir dir="${explodedMarMetaInfDir}" />
        <mkdir dir="${explodedMarLibDir}" />
        <mkdir dir="${explodedMarJspDir}" />

        <uptodate property="moduleUpToDate" targetfile="${assembledModule}">
            <srcfiles dir="${moduleDir}" />
        </uptodate>

        <antcall target="sub_build_module_if_dirty" />
    </target>

    <target name="sub_build_module_if_dirty" unless="moduleUpToDate">
        <available property="moduleAxisDeployExists" file="${moduleAxisDeploy}" />
        <antcall target="sub_build_wsdl" />

        <copy todir="${modulePageflowTempDir}">
            <fileset dir="${moduleSrcDir}">
                <include name="**/*Controller.java"/>
                <include name="**/Global.java"/>
            </fileset>
        </copy>

        <!-- Copy over all the webapp content -->
        <copy todir="${explodedMarDir}">
            <fileset dir="${moduleWebappDir}"/>
        </copy>

        <property name="modulePropertiesFilePresubstitution" value="${moduleBuildDir}/module.properties.presubstitution" />
        <property name="modulePropertiesFile" value="${moduleBuildDir}/module.properties" />
        <concat destfile="${modulePropertiesFilePresubstitution}" append="false" force="true" fixlastline="true">
            <fileset file="${moduleDir}/module.properties"/>
            <filterchain>
                <trim />
            </filterchain>
        </concat>
        <concat destfile="${modulePropertiesFilePresubstitution}" append="true" fixlastline="true">
            <fileset file="./build-info.properties.template"/>
        </concat>

        <copy tofile="${modulePropertiesFile}" file="${modulePropertiesFilePresubstitution}" overwrite="true">
            <filterset begintoken="@@" endtoken="@@">
                <filtersfile file="${build.dir}/svn.properties"/>
                <filter token="BuildTime" value="${buildtime}" />
                <filter token="BuildOS" value="${os.name}" />
                <filter token="BuildUser" value="${user.name}" />
                <filter token="URL" value="Not built from a Subversion source tree" />
                <filter token="Revision" value="Not built from a Subversion source tree" />
            </filterset>
        </copy>

        <path id="module.class.path">
            <fileset dir="${moduleDir}/lib">
                <include name="*.jar"/>
            </fileset>
            <path refid="component.class.path"/>
        </path>

        <echo>Build ${moduleName} module sources</echo>
        <javac
            destdir="${moduleClassesDir}"
            debug="true"
            optimize="true"
            source="1.5"
            classpathref="module.class.path">
            <src path="${moduleSrcDir}"/>
            <src path="${moduleAdditionalSrcPath}"/>
        </javac>

        <mkdir dir="${gensrc.dir}/pageflow"/>
        <antcall target="sub_build_pageflows" />

        <jar jarfile="${explodedMarLibDir}/${moduleName}.jar">
            <fileset dir="${moduleSrcDir}">
                <exclude name="**/*.java" />
                <exclude name="**/*.jsp" />
            </fileset>
            <fileset dir="${moduleClassesDir}" />
        </jar>

        <copy todir="${explodedMarMetaInfDir}">
            <fileset dir="${modulePageflowTempOutputDir}">
                <include name="_pageflow/**" />
            </fileset>
        </copy>

        <copy todir="${explodedMarLibDir}">
            <fileset dir="${moduleDir}/lib">
                <include name="*.jar" />
            </fileset>
        </copy>

        <copy todir="${explodedMarMetaInfDir}">
            <fileset dir="${moduleDir}">
                <include name="module.propeties" />
            </fileset>
        </copy>

        <property name="moduleGWTSrcDir" value="${moduleDir}/gwtsrc"/>
        <available property="moduleGWTSrcExists" file="${moduleGWTSrcDir}" />
        <antcall target="sub_build_gwt" />

        <!-- START JSP BUILD -->
        <property name="moduleJspTempDir" value="${moduleBuildDir}/jspTempDir" />
        <property name="extraJspLibDir" value="${moduleDir}/lib" />
        <property name="moduleJspJarFile" value="${explodedMarJspDir}/${moduleName}_jsp.jar" />
        <condition property="jspUpToDate">
            <!-- No need to build JSPs if either
            1. there are no JSP files in this module (NYI)
            2. the JSP files are not newer than "module_jsp.jar"
            -->
            <uptodate targetfile="${moduleJspJarFile}">
                <srcfiles dir="${moduleSrcDir}" includes="**/*.jsp" />
            </uptodate>
        </condition>
        <antcall target="sub_build_jsp" />
        <!-- END JSP BUILD -->

        <jar jarfile="${assembledModule}"
             manifest="${modulePropertiesFile}">
            <fileset dir="${explodedMarDir}" />
        </jar>

        <antcall target="copyWar" />
    </target>

    <target name="sub_build_wsdl" if="moduleAxisDeployExists">
        <copy todir="${explodedMarMetaInfDir}" file="${moduleAxisDeploy}" />
    </target>

    <target name="sub_build_pageflows">
        <path id="module.webapp.classpath">
            <path refid="module.class.path" />
            <pathelement path="${moduleClassesDir}" />
        </path>
        <build-pageflows webcontentdir="${moduleSrcDir}"
                         srcdir="${modulePageflowTempDir}"
                         destdir="${modulePageflowTempOutputDir}"
                         classpathref="module.webapp.classpath"
                         tempdir="${gensrc.dir}/pageflow"/>
    </target>

    <target name="sub_build_gwt" if="moduleGWTSrcExists">
        <path id="gwt.build.classpath">
            <pathelement path="${moduleGWTSrcDir}" />
            <path refid="gwt-compiler.dependency.path" />
        </path>
        <java classpathref="gwt.build.classpath"
			  classname="com.google.gwt.dev.GWTCompiler"
			  fork="true">
			<arg value="-out"/>
			<arg value="${explodedMarDir}"/>
		   <arg value="${gwtModuleName}"/>
		</java>
    </target>

    <target name="build_module_classes" depends="init">
        <mkdir dir="${labkey.build.dir}" />
        <mkdir dir="${assembled.modules.dir}" />
        <mkdir dir="${assembled.tempModules.dir}" />

        <antcall target="api" />

        <antcall target="core" />
        <antcall target="announcement" />
        <antcall target="experiment" />
        <antcall target="issue" />
        <antcall target="ms1" />
        <antcall target="ms2" />
        <antcall target="mousemodel" />
        <antcall target="pipeline" />
        <antcall target="portal" />
        <antcall target="wiki" />
        <antcall target="flow" />
        <antcall target="query" />
        <antcall target="study"/>
        <antcall target="nab" />
        <antcall target="mothership"/>
        <antcall target="demo"/>
        <antcall target="filecontent" />
        <antcall target="copyWar" />
    </target>

    <target name="core" depends="init">
        <antcall target="sub_build_module">
            <param name="moduleName" value="core" />
        </antcall>
    </target>

    <target name="announcement" depends="init">
        <antcall target="sub_build_module">
            <param name="moduleName" value="announcement" />
        </antcall>
    </target>

    <target name="experiment" depends="init">
        <antcall target="sub_build_module">
            <param name="moduleName" value="experiment" />
        </antcall>
    </target>

    <target name="flow" depends="init">
        <property name="moduleAdditionalSrcPath" value="../../flow/src" />
        <antcall target="sub_build_module">
            <param name="moduleName" value="flow" />
        </antcall>
    </target>

    <target name="query" depends="init">
        <property name="moduleAdditionalSrcPath" value="${gensrc.dir}/antlr" />
        <mkdir dir="${moduleAdditionalSrcPath}/com/labkey/query/sql/antlr"/>
        <antlr target="query/src/com/labkey/query/sql/sql.g" outputdirectory="${moduleAdditionalSrcPath}/com/labkey/query/sql/antlr">
            <classpath path="${lib.dir}/web/antlr.jar"/>
        </antlr>
        <antcall target="sub_build_module">
            <param name="moduleName" value="query" />
        </antcall>
    </target>

    <target name="issue" depends="init">
        <antcall target="sub_build_module">
            <param name="moduleName" value="issue" />
        </antcall>
    </target>

    <target name="ms1" depends="init" unless="baseline_build">
        <antcall target="sub_build_module">
            <param name="moduleName" value="ms1" />
        </antcall>
    </target>

    <target name="ms2" depends="init">
        <antcall target="sub_build_module">
            <param name="moduleName" value="ms2" />
        </antcall>
    </target>

    <target name="mousemodel" depends="init" unless="baseline_build">
        <antcall target="sub_build_module">
            <param name="moduleName" value="mousemodel" />
        </antcall>
    </target>

    <target name="pipeline" depends="init">
        <antcall target="sub_build_module">
            <param name="moduleName" value="pipeline" />
        </antcall>
    </target>

    <target name="portal" depends="init">
        <antcall target="sub_build_module">
            <param name="moduleName" value="portal" />
        </antcall>
    </target>

    <target name="wiki" depends="init">
        <antcall target="sub_build_module">
            <param name="moduleName" value="wiki" />
        </antcall>
    </target>

    <target name="study" depends="init">
        <antcall target="sub_build_module">
            <param name="moduleName" value="study"/>
            <param name="gwtModuleName" value="org.labkey.study.designer.Designer"/>
        </antcall>
    </target>

    <target name="nab" depends="init">
        <antcall target="sub_build_module">
            <param name="moduleName" value="nab" />
        </antcall>
    </target>

    <target name="mothership" depends="init" unless="baseline_build">
        <antcall target="sub_build_module">
            <param name="moduleName" value="mothership"/>
        </antcall>
    </target>

    <target name="filecontent" depends="init" unless="baseline_build">
        <antcall target="sub_build_module">
            <param name="moduleName" value="filecontent"/>
        </antcall>
    </target>

    <target name="demo" depends="init" unless="baseline_build">
        <antcall target="sub_build_module">
            <param name="moduleName" value="demo"/>
        </antcall>
    </target>

    <!-- =================================================================== -->
    <!-- Javadoc                                                             -->
    <!-- =================================================================== -->

        <target name="javadoc" depends="init,build_schemas,build_classes" description="Generate javadoc">
            <javadoc destdir="${javadoc.dir}" source="1.5">
                <classpath>
                    <path refid="component.class.path" />
                    <path refid="shared.class.path" />
                    <path refid="webapp.class.path" />
                </classpath>
                <packageset dir="./labkeyLibrary">
                        <include name="org/fhcrc/cpas/**"/>
                </packageset>
                <packageset dir="./labkey/src">
                        <include name="org/fhcrc/cpas/**"/>
                </packageset>
            </javadoc>
        </target>

    <!-- =================================================================== -->
    <!-- Rebuild - clean then build                                          -->
    <!-- =================================================================== -->
    <target name="rebuild" depends="clean,build" description="Does a clean and then a build"/>

    <!-- =================================================================== -->
    <!-- Build                                                               -->
    <!-- =================================================================== -->
    <target name="build" depends="setup" description="Build all classes in the webapp, and generate struts-config files for any page flows">
        <antcall target="build_schemas">
            <param name="skipWarCopy" value="true" />
        </antcall>
        <antcall target="build_classes">
            <param name="skipWarCopy" value="true" />
        </antcall>

        <antcall target="copyWar" />
    </target>

    <target name="bootstrap" depends="init">
        <mkdir dir="${build.dir}/bootstrap" />

        <javac srcdir="../bootstrap/src"
            destdir="${build.dir}/bootstrap"
            debug="true"
            optimize="true"
            source="1.5"
            target="1.5">
            <classpath>
                <path path="${tomcat.home}/server/lib/catalina.jar" />
            </classpath>
        </javac>

        <jar basedir="${build.dir}/bootstrap" file="${build.dir}/labkeyBootstrap.jar" />

        <move failonerror="false" file="${tomcat.home}/server/lib/cpasBootstrap.jar" tofile="${tomcat.home}/server/lib/labkeyBootstrap.jar" />
        <condition property="bootstrapJarUpToDate">
            <filesmatch file1="${build.dir}/labkeyBootstrap.jar" file2="${tomcat.home}/server/lib/labkeyBootstrap.jar"/>
        </condition>
        <antcall target="copy_bootstrap_files" />
    </target>

    <target name="copy_bootstrap_files" unless="bootstrapJarUpToDate">
        <echo message="Copying bootstrap files to Tomcat" />
        <copy todir="${tomcat.home}/server/lib" file="${build.dir}/labkeyBootstrap.jar" overwrite="true"/>
    </target>

    <!--
    Deferring copying until the very end of the build prevents us from causing Tomcat to thrash redeploying
    as each module finishes its build.
    -->
    <target name="copyWar" unless="skipWarCopy" depends="bootstrap">
        <echo message="Copying built WAR into target directory" />

        <java classname="org.labkey.bootstrap.DirectoryFileListWriter"
              dir="${labkey.tempWar.dir}"
              classpath="${build.dir}/bootstrap"
              failonerror="true"
              fork="true"
                />

        <copy todir="${labkey.explodedWar.dir}" preservelastmodified="true">
            <fileset dir="${labkey.tempWar.dir}" />
        </copy>
        <copy todir="${assembled.modules.dir}" preservelastmodified="true">
            <fileset dir="${assembled.tempModules.dir}" />
        </copy>
    </target>

    <!-- Need to setup a different substitution for log4j in production -->
    <target name="build_baseline_production" depends="init">
        <property name="log4j.consoleAppender" value=""/>
        <antcall target="clean" />
        <antcall target="build">
            <param name="baseline_build" value="true" />
        </antcall>
        <antcall target="compress_war" />
    </target>

    <target name="compress_war" depends="init">
        <mkdir dir="${dist.dir}/webapps"/>
        <war destfile="${dist.dir}/webapps/labkey.war"
             webxml="${labkey.explodedWar.dir}/WEB-INF/web.xml">
            <fileset dir="${labkey.explodedWar.dir}">
                <exclude name="**/WEB-INF/web.xml"/>
                <exclude name="**/*.java"/>
            </fileset>
        </war>
    </target>

    <target name="package_redistributables">
        <ant inheritall="false" antfile="${basedir}/../installer/build.xml" target="build" />
    </target>

    <target name="package_source">
        <ant inheritall="false" antfile="${basedir}/../installer/build.xml" target="archive_source" />
    </target>

    <target name="dist_standard">
        <antcall target="build_baseline_production" />
        <antcall target="package_redistributables">
            <param name="dist_sub.dir" value="standard" />
        </antcall>
        <antcall target="package_source" />
    </target>

    <target name="dist_cpas">
        <antcall target="build_baseline_production" />
        <antcall target="mothership" />
        <antcall target="package_redistributables">
            <param name="dist_sub.dir" value="cpas" />
        </antcall>
    </target>

    <target name="dist_chavi">
        <antcall target="build_baseline_production" />
        <antcall target="nab" />
        <antcall target="filecontent" />
        <antcall target="package_redistributables">
            <param name="dist_sub.dir" value="chavi" />
        </antcall>
    </target>

    <target name="dist_proteomics">
        <antcall target="build_baseline_production" />
        <antcall target="mousemodel" />
        <antcall target="package_redistributables">
            <param name="dist_sub.dir" value="proteomics" />
        </antcall>
    </target>

    <!-- =================================================================== -->
    <!-- Clean                                                               -->
    <!-- =================================================================== -->

    <target name="clean" depends="init">
        <delete file="${tomcat.home}/webapps/labkey.war"/>
        <delete dir="$./javadoc"/>
        <mkdir dir="${gensrc.dir}" />
        <mkdir dir="${build.dir}/caBIG/genSrc" />
        <!-- We need to keep the gensrc directory around or IntelliJ
             doesn't notice when subdirectories come and go and automatically
             parse the files in them -->
        <delete includeemptydirs="true">
            <fileset dir="${build.dir}" includes="**/*">
                <exclude name="gensrc"/>
                <exclude name="caBIG/genSrc" />
            </fileset>
            <fileset dir="${gensrc.dir}" includes="**/*"/>
            <fileset dir="${build.dir}/caBIG/genSrc" includes="**/*"/>
        </delete>
        <delete dir="${dist.dir}" />
    </target>

    <!-- =================================================================== -->
    <!-- Stop Tomcat                                                         -->
    <!-- =================================================================== -->
<!--
    <target depends="init" name="start_tomcat">
        <echo message="starting tomcat..."/>
        <java fork="true" jar="${tomcat.home}\bin\bootstrap.jar">
            <sysproperty key="user.dir" value="${tomcat.home}"/>
            <arg value="start"/>
        </java>
    </target>
-->
    <target name="start_tomcat" depends="init">
        <echo message="${basedir}/..${file.separator}..${file.separator}external${file.separator}bin;${env.Path}" />
        <!-- Set catalina.opts to the empty string here, in case it hasn't already been defined. -->
        <property name="catalina.opts" value="" />
        <exec executable="cmd" spawn="true" dir="${tomcat.home}/bin">
            <env key="path" path="${basedir}${file.separator}..${file.separator}..${file.separator}external${file.separator}bin;${env.Path}" />
            <env key="CATALINA_OPTS" value="-ea -Ddevmode=true ${catalina.opts}" />
            <arg line="/c start "/>
            <arg value="&quot;Tomcat Server&quot;"/>
            <arg value="/B"/>
            <arg value="${tomcat.home}/bin/catalina.bat"/>
            <arg value="start"/>
            <env key="CLOSE_WINDOW" value="true"/>
        </exec>
        <echo message="Waiting 30 seconds for tomcat to start..." />
        <sleep seconds="30" />
        <echo message="Tomcat started." />
    </target>

    <target depends="init" name="stop_tomcat">
        <java fork="true" jar="${tomcat.home}\bin\bootstrap.jar">
            <sysproperty key="user.dir" value="${tomcat.home}"/>
            <arg value="stop"/>
        </java>
        <echo message="Waiting 5 seconds for tomcat to stop..."/>
        <sleep seconds="5"/>
        <echo message="Tomcat stopped."/>
    </target>

    <target name="update">
        <exec executable="svn" dir="${basedir}">
            <arg value="update"/>
        </exec>
    </target>

    <target name="update_all">
        <exec executable="svn" dir="${basedir}/..">
            <arg value="update"/>
        </exec>
    </target>

    <target name="drt" description="Run LabKey Verification tests">
        <ant antfile="../test/build.xml" target="drt" inheritall="false" />
    </target>

    <target name="drt-clean">
        <ant antfile="../test/build.xml" target="drt-clean" inheritall="false" />
    </target>

    <target name="cruisecontrol">
        <fail unless="cc.tomcat.home"/>
        <fail unless="cc.tomcat.port"/>
        <fail unless="cc.suite"/>
        <fail unless="cc.debug.port"/>

        <property name="tomcat.home" value="${cc.tomcat.home}"/>
        <property name="labkey.port" value="${cc.tomcat.port}"/>
        <property name="catalina.opts" value="-Xdebug -Dproject.root=${basedir}/../../ -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=${cc.debug.port} " />
        <property name="suite" value="${cc.suite}"/>

        <echo message="tomcat.home: ${tomcat.home}" />
        <echo message="labkey.port: ${labkey.port}" />
        <echo message="catalina.opts: ${catalina.opts}" />
        <echo message="suite: ${suite}" />

        <antcall target="stop_tomcat" inheritall="true" />
        <antcall target="pick_mssql" inheritall="true" />

        <antcall target="clean" inheritall="true" />
        <antcall target="build" inheritall="true" />
        
        <ant inheritall="false" antfile="../test/build.xml" target="clean"/>
        <property name="test.dir" value="../test" />
        <echo message="******************** Starting SQL Server Suite: ${cc.suite} ********************" />
        <ant inheritall="true" antfile="../test/build.xml" target="runsuite-tomcat-sqlserver" />
        <echo message="******************** Completed SQL Server Suite: ${cc.suite} ********************"/>

        <echo message="******************** Starting Postgres Suite: ${cc.suite} ********************"/>
        <antcall inheritall="true" target="pick_pg"/>
        <ant inheritall="true" antfile="../test/build.xml" target="runsuite-tomcat-postgres"/>
        <echo message="******************** Completed Postgres Suite: ${cc.suite} ********************"/>
    </target>
</project>
