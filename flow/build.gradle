import org.labkey.gradle.util.BuildUtils

sourceSets {
    engine {
        java {
            srcDirs = ['./enginesrc']
        }
    }
}

dependencies {
    BuildUtils.addLabKeyDependency(project: project, config: "engineCompile", depProjectPath: project.path, depProjectConfig: 'xmlSchema')
    BuildUtils.addLabKeyDependency(project: project, config: "engineCompile", depProjectPath: BuildUtils.getApiProjectPath(project.gradle))
    BuildUtils.addLabKeyDependency(project: project, config: "engineCompile", depProjectPath: BuildUtils.getInternalProjectPath(project.gradle))
    engineCompile "org.labkey:labkey-client-api:${project.version}"
    engineCompile "org.apache.tomcat:tomcat-jasper:${apacheTomcatVersion}"
    engineCompile "org.apache.tomcat:tomcat-jsp-api:${apacheTomcatVersion}"
    engineCompile project.files(project.tasks.schemasJar)

    compile sourceSets.engine.output
    jspCompile sourceSets.engine.output
    BuildUtils.addLabKeyDependency(project: project, config: "jspCompile", depProjectPath: project.path, depProjectConfig: 'xmlSchema')
    BuildUtils.addLabKeyDependency(project: project, config: "compile", depProjectPath: BuildUtils.getPlatformModuleProjectPath(project.gradle, "assay"), depProjectConfig: "apiCompile")
    
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: BuildUtils.getPlatformModuleProjectPath(project.gradle, "experiment"), depProjectConfig: "published", depExtenstion: "module")
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: BuildUtils.getPlatformModuleProjectPath(project.gradle, "query"), depProjectConfig: "published", depExtenstion: "module")
}

project.task("engineJar",
        group: "Build",
        type: Jar,
        description: "produce jar file for flow engine source",
        {
            classifier "engine"
            from project.sourceSets.engine.output
            baseName "${project.name}_engine"
            destinationDir = project.file(project.labkey.explodedModuleLibDir)
        })

project.tasks.engineJar.dependsOn(project.engineClasses)
project.tasks.assemble.dependsOn(project.tasks.engineJar)
project.tasks.module.dependsOn(project.tasks.engineJar)
